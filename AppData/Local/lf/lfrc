# interpreter for shell commands
set shell pwsh

# Shell commands with multiline definitions and/or positional arguments and/or
# quotes do not work in Windows. For anything but the simplest shell commands,
# it is recommended to create separate script files and simply call them here
# in commands or mappings.
#
# Also, the default keybindings are defined using cmd syntax (i.e. '%EDITOR%')
# which does not work with powershell. Therefore, you need to override these
# keybindings with explicit choices accordingly.

# change the default open command to work in powerShell
cmd open &start $Env:f

# change the editor used in default editor keybinding
# There is no builtin terminal editor installed in Windows. The default editor
# mapping uses 'notepad' which launches in a separate GUI window. You may
# instead install a terminal editor of your choice and replace the default
# editor keybinding accordingly.
map e $vim $Env:f

# change the pager used in default pager keybinding
# The standard pager used in Windows is 'more' which is not a very capable
# pager. You may instead install a pager of your choice and replace the default
# pager keybinding accordingly.
map i $less $Env:f

# change the shell used in default shell keybinding
map w $powershell

# change 'doc' command to use a different pager
cmd doc $lf -doc | less

# leave some space at the top and the bottom of the screen
set scrolloff 10

set filesep " "
# use enter for shell commands
map <enter> shell


# Basic Settings
set hidden true
set ignorecase true
set icons true

# Custom Functions
# quick rename using r
cmd mkdir %{{ 
    powershell.exe -Command {
    	Write-Host "Directory Name: "
        $ans = Read-Host 
        New-Item -ItemType Directory -Force -Path $ans
    }
}}

cmd mkfile %{{ 
    powershell.exe -Command {
    	Write-Host "File Name: "
        $ans = Read-Host 
        New-Item -ItemType File -Force -Path $ans
    }
}}

cmd unarchive %{{ 
    powershell.exe -Command { 

        $7zPath = "C:\Users\Kieri\scoop\apps\7zip\current\7z.exe"
        $extension = [IO.Path]::GetExtension($env:f.Trim('"'))

        switch ($extension) {
            ".zip" { Expand-Archive -Path $env:f.Trim('"') -DestinationPath $env:f.Trim('"').Trim('.zip') }
            ".7z" { & $7zPath e $env:f }
            ".tar.gz" { & $7zPath x $env:f }
            ".tar.bz2" { & $7zPath x $env:f }
            ".tar" { & $7zPath x $env:f }
            default { Write-Host "Unsupported format" }
        }
    }
}}

cmd archive %{{ 
    powershell.exe -Command { 

        $7zPath = "C:\Users\Kieri\scoop\apps\7zip\current\7z.exe"

        # Ask user for the name of the new archive
        $archiveName = Read-Host -Prompt 'Enter name for new archive' 

        Compress-Archive -Path $env:f.Trim('"') -DestinationPath "$archiveName.zip"
    }
}}

cmd deleteItem %{{ 
    powershell.exe -Command { 
        Remove-Item -Path $env:f.Trim('"') 
    }
}}

cmd copyPath ${{ 
    powershell.exe -Command { 
       Set-Clipboard (Resolve-Path $env:f.Trim('"')) 
    }
}}
# If win terminal ever supports photo preview revisit this
# cmd openPhotos !{{
#     pwsh.exe -Command {
#        start .\scoop\apps\quicklook\3.7.3\QuickLook.exe $env:f.Trim('"')
#     }
# }}

# Bindings
map d
map m
map y

map au unarchive
map az archive
map v %C:\Users\Kieri\scoop\apps\quicklook\3.7.3\QuickLook.exe $env:f.Trim('"')

# Basic Functions
map . set hidden!
map <delete> deleteItem
map yy copyPath
map p paste
map d cut
map yf copy
map <enter> open
map R reload
map mf mkfile
map md mkdir
map C clear

# Movement
map gD cd ~/documents
map gd cd ~/downloads
map gp cd ~/pictures
map gc cd ~/.config
map gr cd ~/source/repos
map gv cd ~/videos
map ga cd ~/AppData/local
map gn cd ~/notes
