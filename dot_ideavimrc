" Setting leader keys
let mapleader = " "
let maplocalleader = " "

" Setting options
set hlsearch
set number
set mouse=a
set clipboard=unnamedplus
set breakindent
set undofile
set ignorecase
set smartcase
set signcolumn=yes
set updatetime=250
set timeout
set timeoutlen=800
set completeopt=menuone,noselect
set termguicolors
set surround
set visualbell
set relativenumber
set incsearch
set hlsearch
set highlightedyank
set nerdtree
" set which-key

" Basic Keymaps
nnoremap <Space> <Nop>
vnoremap <Space> <Nop>
nnoremap k gk
nnoremap j gj

" Popup navigation
inoremap <C-j> <Action>(PopupMenu-selectNext)
inoremap <C-k> <Action>(PopupMenu-selectPrev)

" File navigation
map <leader>ff <action>(GotoFile)
map <leader>fr <action>(RecentFiles)
map <leader>fp <action>(FindInPath)
map <leader><leader> <Action>(RecentFiles)
map <leader>fl <action>(RecentLocations)
map <leader>fs <action>(NewScratchFile)


" Actions
map <leader>am <action>(ShowIntentionActions)
map <leader><enter> <action>(SearchEverywhere)

" Close active tab
map <leader>q <action>(CloseActiveEditor)

" Go to code
nmap gd <Action>(GotoDeclaration)
nmap gy <Action>(GotoTypeDeclaration)
nmap gi <Action>(GotoImplementation)
nmap gu <Action>(ShowUsages)
nmap gt <Action>(GotoTest)
nmap <leader>, <Action>(Back)
nmap <leader>. <Action>(Forward)

" Refactoring
map <leader>rn <Action>(RenameElement)
map <leader>rm <Action>(ExtractMethod)
map <leader>rv <Action>(IntroduceVariable)
map <leader>rf <Action>(IntroduceField)
map <leader>rs <Action>(ChangeSignature)
map <leader>rr <Action>(Refactorings.QuickListPopupAction)

"Misc
map <C-Space> :action CodeCompletion<CR>
map <leader>rf :action ReformatCode<CR>
map gc <action>(CommentByLineCommentn
map gb <action>(CommentByBlockComment)
map <leader>fa :action FindAction<CR>
nmap <leader>ww :action SaveAll<CR>

" Git windows
"map <leader>gc <Action>(CheckinProject)
map <leader>gw <Action>(ActivateVersionControlToolWindow)
map <leader>gb <Action>(Git.Branches)

" Errors
map <leader>e. <Action>(ReSharperGotoNextErrorInSolution)
map <leader>e, <Action>(ReSharperGotoPrevErrorInSolution)

"Switching split windows
nmap <C-,> :tabprevious<CR>
nmap <C-.> :tabnext<CR>
nmap <C-h> <C-w>h
nmap <C-j> <C-w>j
nmap <C-k> <C-w>k
nmap <C-l> <C-w>l

" Tool Windows
map <leader>vc <Action>(ActivateCommitToolWindow)
map <leader>vd <Action>(ActivateDebugToolWindow)
map <leader>vD <Action>(ActivateDatabaseToolWindow)
map <leader>vp <Action>(ActivateProblemsViewToolWindow)
map <leader>vr <Action>(ActivateRunToolWindow)
" map <leader>vS <Action>(ActivateServicesToolWindow )
map <leader>vs <Action>(ActivateStructureToolWindow)
map <leader>vt <Action>(ActivateTerminalToolWindow)
map <leader>vT <Action>(ActivateTODOToolWindow)
map <leader>vv <Action>(ActivateVersionControlToolWindow)
map <leader>vE <Action>(ActivateEndpointsToolWindow)
"map <leader>vP <Action>(ActivatePullRequestToolWindow)
"map <leader>vn <Action>(ActivateNugetToolWindow)
"map <leader>vut <Action>(ActivateUnitTestToolWindow)
" Open NERDTree (use q to exit)
map <leader>ve :NERDTreeToggle<CR>

"
" Which-key settings
" set which-key
" let g:WhichKey_FontSize = 16
" let g:WhichKey_CommandColor = "#41ead4"
" let g:WhichKey_PrefixColor = "#f335b2"
" let g:WhichKey_SortOrder = "by_key_prefix_first"
"
" let g:WhichKeyDesc_leader = "<leader> Leader key"
"
" let g:WhichKeyDesc_leader = "<leader>x Open file explorer"
"
" let g:WhichKeyDesc_easymotion = "<leader>j Jump with Easymotion"
" let g:WhichKeyDesc_easymotion_prefix = "<leader><leader>"
"
" let g:WhichKeyDesc_comment = "<leader>c Comment line"
"
" let g:WhichKeyDesc_fold = "<leader>z Folding"
" let g:WhichKeyDesc_fold_all = "<leader>zc Fold all regions"
" let g:WhichKeyDesc_unfold_all = "<leader>zo Unfold all regions"
"
" let g:WhichKeyDesc_window = "<leader>w Window splits"
" let g:WhichKeyDesc_window_split_vertically = "<leader>wv Split vertically"
" let g:WhichKeyDesc_window_split_horizontally = "<leader>wh Split horizontally"
" let g:WhichKeyDesc_window_split_unsplit = "<leader>wu Unsplit"
" let g:WhichKeyDesc_window_split_move_editor = "<leader>wm Move editor to opposite tab group"
"
"
" let g:WhichKeyDesc_display = "<leader>d Display options"
" let g:WhichKeyDesc_zen_mode = "<leader>dz Toggle Zen mode"
" let g:WhichKeyDesc_df_mode = "<leader>dd Toggle Distraction-Free mode"
" let g:WhichKeyDesc_fullscreen = "<leader>df Toggle full screen"
"
" let g:WhichKeyDesc_action= "<leader>a Actions"
" let g:WhichKeyDesc_action_context_menu = "<leader>am Open context menu"
" let g:WhichKeyDesc_action_search = "<leader>as Open command modal"
"
" let g:WhichKeyDesc_file_quickLook = "<leader><leader> Recent files"
"
" let g:WhichKeyDesc_file_nav = "<leader>f File navigation"
" let g:WhichKeyDesc_file_nav_goto_file = "<leader>ff Go to file"
" let g:WhichKeyDesc_file_nav_goto_content = "<leader>fc Search for file content"
" let g:WhichKeyDesc_file_nav_show_recent_files = "<leader>fr Show recent files"
" let g:WhichKeyDesc_file_nav_show_recent_locations = "<leader>fl Show recent locations"
"
" let g:WhichKeyDesc_close_tab = "<leader>q Close active tab"
"
" let g:WhichKeyDesc_refactoring = "<leader>r Refactoring menu"
" let g:WhichKeyDesc_refactoring_rename = "<leader>rn Rename element"
" let g:WhichKeyDesc_refactoring_method = "<leader>rm Extract method"
" let g:WhichKeyDesc_refactoring_variable = "<leader>rv Introduce variable"
" let g:WhichKeyDesc_refactoring_field = "<leader>rf Introduce field"
" let g:WhichKeyDesc_refactoring_signature = "<leader>rs Change signature"
" let g:WhichKeyDesc_refactoring_all = "<leader>rr Open refactorings list"
"
" let g:WhichKeyDesc_goto = "<leader>g Go to X"
" let g:WhichKeyDesc_goto_declaration = "<leader>gd Go to Definition"
" let g:WhichKeyDesc_goto_type_declaration = "<leader>gy Go to Type Definition"
" let g:WhichKeyDesc_goto_implementation = "<leader>gi Go to Implementation"
" let g:WhichKeyDesc_goto_usages = "<leader>gu Go to Usages"
" let g:WhichKeyDesc_goto_test = "<leader>gt Go to Test"
" let g:WhichKeyDesc_goto_back = "<leader>gb Go Back"
" let g:WhichKeyDesc_goto_forward = "<leader>gf Go Forward"
"
" let g:WhichKeyDesc_git = "<leader>g Git operations"
" let g:WhichKeyDesc_git_commit = "<leader>gc Open Git commit dialog"
" let g:WhichKeyDesc_git_status = "<leader>gs Open Git status dialog"
" let g:WhichKeyDesc_git_branches = "<leader>gb Open Git branches list"
"
" let g:WhichKeyDesc_errors = "<leader>e Error navigation"
" let g:WhichKeyDesc_errors_next = "<leader>en Go to next error in solution"
" let g:WhichKeyDesc_errors_prev = "<leader>ep Go to previous error in solution"
